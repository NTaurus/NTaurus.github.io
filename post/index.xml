<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on NTaurus的乌托邦</title>
    <link>https://NTaurus.github.io/post/</link>
    <description>Recent content in Posts on NTaurus的乌托邦</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 01 Jan 2020 00:09:28 +0800</lastBuildDate>
    
	<atom:link href="https://NTaurus.github.io/post/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>偶尔</title>
      <link>https://NTaurus.github.io/2020/01/%E5%81%B6%E5%B0%94/</link>
      <pubDate>Wed, 01 Jan 2020 00:09:28 +0800</pubDate>
      
      <guid>https://NTaurus.github.io/2020/01/%E5%81%B6%E5%B0%94/</guid>
      <description>&lt;p&gt;偶尔去一趟海边&lt;br /&gt;
尝一尝咸咸的海风&lt;br /&gt;
抱一抱暖暖的阳光&lt;/p&gt;

&lt;p&gt;偶尔戴上耳机&lt;br /&gt;
听一听熟悉的旋律&lt;br /&gt;
想一想昨天的故事&lt;/p&gt;

&lt;p&gt;偶尔觉得时间很快&lt;br /&gt;
发一发呆&lt;br /&gt;
眯一眯眼&lt;br /&gt;
时间就像是被快进了&lt;/p&gt;

&lt;p&gt;偶尔溜进街边的小店&lt;br /&gt;
吆喝着老板来一份&lt;br /&gt;
不加辣的牛肉面&lt;/p&gt;

&lt;p&gt;偶尔为了看看夕阳&lt;br /&gt;
坐在沙滩上&lt;br /&gt;
待到了傍晚&lt;br /&gt;
静静地等着&lt;br /&gt;
太阳沉入海平线&lt;br /&gt;
也想说些什么&lt;br /&gt;
可也不知道说什么&lt;br /&gt;
当时是&lt;br /&gt;
现在也是&lt;br /&gt;
只觉得那种感觉很好&lt;br /&gt;
&lt;img src=&#34;https://NTaurus.github.io/images/2.jpg&#34; alt=&#34;&amp;quot;..&amp;quot;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;偶尔也在回去时挤不上公交&lt;br /&gt;
只好骑着路边的共享&lt;br /&gt;
挤一挤车来人往的街道&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://NTaurus.github.io/images/3.jpg&#34; alt=&#34;&amp;quot;..&amp;quot;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;偶尔会望望天上的飞机&lt;br /&gt;
猜一猜是去往哪里呢&lt;br /&gt;
也想着我又要去哪呢&lt;/p&gt;

&lt;p&gt;偶尔是这样吗&lt;br /&gt;
是吧&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>链表</title>
      <link>https://NTaurus.github.io/2019/12/%E9%93%BE%E8%A1%A8/</link>
      <pubDate>Tue, 31 Dec 2019 19:38:12 +0800</pubDate>
      
      <guid>https://NTaurus.github.io/2019/12/%E9%93%BE%E8%A1%A8/</guid>
      <description>&lt;p&gt;&lt;strong&gt;PAT上考查链表的题挺多，这篇介绍链表的一种解题思路，方法不是最好的，但理解跟操作还是比较容易的。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;解题套路：&lt;/strong&gt;&lt;br /&gt;
1.输入的时候用一个结构体把数据存起来（结构的作用是记录数据data跟下一个地址，方便连起来），输入的地址作为结构体的下标。&lt;br /&gt;
2.通过while循环把链表的地址按顺序存到数组a中。
3.根据题目的要求（排序的规则），把a数组里的地址按顺序排到另一个数组b中。&lt;br /&gt;
4.输出即可。&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;1025-反转链表-25分&#34;&gt;1025 反转链表 (25分)&lt;/h3&gt;

&lt;p&gt;给定一个常数 K 以及一个单链表 L，请编写程序将 L 中每 K 个结点反转。例如：给定 L 为 1→2→3→4→5→6，K 为 3，则输出应该为 3→2→1→6→5→4；如果 K 为 4，则输出应该为 4→3→2→1→5→6，即最后不到 K 个元素不反转。&lt;/p&gt;

&lt;p&gt;输入格式：&lt;br /&gt;
每个输入包含 1 个测试用例。每个测试用例第 1 行给出第 1 个结点的地址、结点总个数正整数 N (≤10^5)、以及正整数 K (≤N)，即要求反转的子链结点的个数。结点的地址是 5 位非负整数，NULL 地址用 −1 表示。&lt;/p&gt;

&lt;p&gt;接下来有 N 行，每行格式为：&lt;/p&gt;

&lt;p&gt;Address Data Next&lt;/p&gt;

&lt;p&gt;其中 Address 是结点地址，Data 是该结点保存的整数数据，Next 是下一结点的地址。&lt;/p&gt;

&lt;p&gt;输出格式：&lt;br /&gt;
对每个测试用例，顺序输出反转后的链表，其上每个结点占一行，格式与输入相同。&lt;/p&gt;

&lt;p&gt;输入样例：&lt;br /&gt;
00100 6 4&lt;br /&gt;
00000 4 99999&lt;br /&gt;
00100 1 12309&lt;br /&gt;
68237 6 -1&lt;br /&gt;
33218 3 00000&lt;br /&gt;
99999 5 68237&lt;br /&gt;
12309 2 33218&lt;/p&gt;

&lt;p&gt;输出样例：&lt;br /&gt;
00000 4 33218&lt;br /&gt;
33218 3 12309&lt;br /&gt;
12309 2 00100&lt;br /&gt;
00100 1 99999&lt;br /&gt;
99999 5 68237&lt;br /&gt;
68237 6 -1&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#include&amp;lt;stdio.h&amp;gt;
struct node{
int data;   //数据
int next;   //下一个结点的地址
}p[100005];
int main(){
    int N,K,first,ad;
    int lb=0,l=0,i;

    int b[100005],ans[100005];
    scanf(&amp;quot;%d %d %d&amp;quot;,&amp;amp;first,&amp;amp;N,&amp;amp;K); 
    for(i=0;i&amp;lt;N;i++){
        scanf(&amp;quot;%d&amp;quot;,&amp;amp;ad);
        scanf(&amp;quot;%d %d&amp;quot;,&amp;amp;p[ad].data,&amp;amp;p[ad].next); 
    }
    while(first!=-1){//给链表正常排序 （这个步骤在排序的过程中，也把输入中的垃圾结点过滤掉了（输入的结点不一定在链表上））
        b[lb]=first;
        first=p[first].next;    //地址作为下标后，通过地址就可以找到下一个结点的地址了
        lb++;
    }
    int y=lb%K; // y是余数，最后存 
    for(i=0;i&amp;lt;lb-y;i++){
        if((i+1)%K==0){  //如果满足K个，就将反转 
            for(int j=i;j&amp;gt;=i+1-K;j--){ 
                ans[l]=b[j];l++;
            }
        }
    }
    if(y){  //如果余数不为0，最后部分正序补上 
        for(i=lb-y;i&amp;lt;lb;i++){
            ans[l]=b[i];l++;
        }
    }
    for(i=0;i&amp;lt;l;i++){   //输出的格式是address  data  next
        if(i!=l-1)printf(&amp;quot;%05d %d %05d\n&amp;quot;,ans[i],p[ans[i]].data,ans[i+1]);     //这里ans[i]为当前结点的地址 p[ans[i]].data就是地址指向的结点的数据 ans[i+1]为下一个地址 
        else printf(&amp;quot;%05d %d -1\n&amp;quot;,ans[i],p[ans[i]].data);  //因为最后一个结点的下一个地址是NULL，所以分开输出
    }
    return 0;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;1075-链表元素分类-25分&#34;&gt;1075 链表元素分类 (25分)&lt;/h3&gt;

&lt;p&gt;给定一个单链表，请编写程序将链表元素进行分类排列，使得所有负值元素都排在非负值元素的前面，而 [0, K] 区间内的元素都排在大于 K 的元素前面。但每一类内部元素的顺序是不能改变的。例如：给定链表为 18→7→-4→0→5→-6→10→11→-2，K 为 10，则输出应该为 -4→-6→-2→7→0→5→10→18→11。&lt;/p&gt;

&lt;p&gt;输入格式：&lt;br /&gt;
每个输入包含一个测试用例。每个测试用例第 1 行给出：第 1 个结点的地址；结点总个数，即正整数N (≤10^5​​ )；以及正整数K (≤10^3​​ )。结点的地址是 5 位非负整数，NULL 地址用 −1 表示。&lt;/p&gt;

&lt;p&gt;接下来有 N 行，每行格式为：&lt;/p&gt;

&lt;p&gt;Address Data Next&lt;/p&gt;

&lt;p&gt;其中 Address 是结点地址；Data 是该结点保存的数据，为 [−10^5​​ ,10^​5​​ ] 区间内的整数；Next 是下一结点的地址。题目保证给出的链表不为空。&lt;/p&gt;

&lt;p&gt;输出格式：&lt;br /&gt;
对每个测试用例，按链表从头到尾的顺序输出重排后的结果链表，其上每个结点占一行，格式与输入相同。&lt;/p&gt;

&lt;p&gt;输入样例：&lt;br /&gt;
00100 9 10&lt;br /&gt;
23333 10 27777&lt;br /&gt;
00000 0 99999&lt;br /&gt;
00100 18 12309&lt;br /&gt;
68237 -6 23333&lt;br /&gt;
33218 -4 00000&lt;br /&gt;
48652 -2 -1&lt;br /&gt;
99999 5 68237&lt;br /&gt;
27777 11 48652&lt;br /&gt;
12309 7 33218&lt;/p&gt;

&lt;p&gt;输出样例：&lt;br /&gt;
33218 -4 68237&lt;br /&gt;
68237 -6 48652&lt;br /&gt;
48652 -2 12309&lt;br /&gt;
12309 7 00000&lt;br /&gt;
00000 0 99999&lt;br /&gt;
99999 5 23333&lt;br /&gt;
23333 10 00100&lt;br /&gt;
00100 18 27777&lt;br /&gt;
27777 11 -1&lt;/p&gt;

&lt;p&gt;这题有点麻烦，要求有点多，我的方法比较直接（笨）。题目要求：&lt;strong&gt;负值&lt;/strong&gt; 排前面，其次 &lt;strong&gt;[0,K]&lt;/strong&gt;,最后排 &lt;strong&gt;&amp;gt;K&lt;/strong&gt; 的元素。所以直接用3个组数分别把三个区间的元素挑选出来，再按顺序合并到一个数组，最后输出就可以了。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#include&amp;lt;iostream&amp;gt;
#include&amp;lt;cstdio&amp;gt;
using namespace std;
struct node{
    int data;
    int next;
}p[100005];
int main(){//f存负数，kl存[0,K]的数，kr存大于K的数，ans存结果 
    int N,K,temp,a[100004],f[100004],kl[100004],kr[100004],ans[100004],first;
    int i,l=0,la=0,lr=0,lk=0,lf=0;
    cin&amp;gt;&amp;gt;first&amp;gt;&amp;gt;N&amp;gt;&amp;gt;K;
    for(i=0;i&amp;lt;N;i++){
        cin&amp;gt;&amp;gt;temp;
        cin&amp;gt;&amp;gt;p[temp].data&amp;gt;&amp;gt;p[temp].next;
    }
    while(first!=-1){
        a[la++]=first;
        first=p[first].next;
    }//下面为元素分类 
    for(i=0;i&amp;lt;la;i++){
        if(p[a[i]].data&amp;lt;0)  f[lf++]=a[i];   //负数 
        else if(p[a[i]].data&amp;gt;=0&amp;amp;&amp;amp;p[a[i]].data&amp;lt;=K)   kl[lk++]=a[i];  //0~K的数 
        else    kr[lr++]=a[i];  // 大于K的数 
    }//下面按顺序合并 
    for(i=0;i&amp;lt;lf;i++)   ans[l++]=f[i];      //负数 
    for(i=0;i&amp;lt;lk;i++)   ans[l++]=kl[i];     //0~K的数 
    for(i=0;i&amp;lt;lr;i++)   ans[l++]=kr[i];     // 大于K的数 
    for(i=0;i&amp;lt;l;i++){   
        if(i!=l-1)printf(&amp;quot;%05d %d %05d\n&amp;quot;,ans[i],p[ans[i]].data,ans[i+1]);   
        else printf(&amp;quot;%05d %d -1\n&amp;quot;,ans[i],p[ans[i]].data);  
    }
    return 0;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;l2-002-链表去重-25分&#34;&gt;L2-002 链表去重 (25分)&lt;/h3&gt;

&lt;p&gt;给定一个带整数键值的链表 L，你需要把其中绝对值重复的键值结点删掉。即对每个键值 K，只有第一个绝对值等于 K 的结点被保留。同时，所有被删除的结点须被保存在另一个链表上。例如给定 L 为 21→-15→-15→-7→15，你需要输出去重后的链表 21→-15→-7，还有被删除的链表 -15→15。&lt;/p&gt;

&lt;p&gt;输入格式：&lt;br /&gt;
输入在第一行给出 L 的第一个结点的地址和一个正整数 N（≤10^5，为结点总数）。一个结点的地址是非负的 5 位整数，空地址 NULL 用 −1 来表示。&lt;/p&gt;

&lt;p&gt;随后 N 行，每行按以下格式描述一个结点：&lt;/p&gt;

&lt;p&gt;地址 键值 下一个结点&lt;/p&gt;

&lt;p&gt;其中地址是该结点的地址，键值是绝对值不超过10^4
​​ 的整数，下一个结点是下个结点的地址。&lt;/p&gt;

&lt;p&gt;输出格式：&lt;br /&gt;
首先输出去重后的链表，然后输出被删除的链表。每个结点占一行，按输入的格式输出。&lt;/p&gt;

&lt;p&gt;输入样例：&lt;br /&gt;
00100 5&lt;br /&gt;
99999 -7 87654&lt;br /&gt;
23854 -15 00000&lt;br /&gt;
87654 15 -1&lt;br /&gt;
00000 -15 99999&lt;br /&gt;
00100 21 23854&lt;/p&gt;

&lt;p&gt;输出样例：&lt;br /&gt;
00100 21 23854&lt;br /&gt;
23854 -15 99999&lt;br /&gt;
99999 -7 -1&lt;br /&gt;
00000 -15 87654&lt;br /&gt;
87654 15 -1&lt;/p&gt;

&lt;p&gt;解题思路：这道题的要求是去重，而且输出为两个链表，所以我们需要两个数组存去重后的分成的两个链表的地址；而且只保留第一个绝对值的数，后面重复的就放到链表b中。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#include&amp;lt;iostream&amp;gt;
#include&amp;lt;unordered_map&amp;gt;
#include&amp;lt;vector&amp;gt;
#include&amp;lt;algorithm&amp;gt;
#include&amp;lt;cmath&amp;gt;
#include&amp;lt;cstdio&amp;gt;
using namespace std;
struct node{
    int next;
    int data;
}p[100005],q[100005];
unordered_map&amp;lt;int,int&amp;gt;mp;//不自动排序，也可以用上面的q来查询是不是第一个出现的元素（绝对值） 
vector&amp;lt;int&amp;gt;a,b,c;
int main(){
    int N,i,temp,first;
    cin&amp;gt;&amp;gt;first&amp;gt;&amp;gt;N;
    for(i=0;i&amp;lt;N;i++)    cin&amp;gt;&amp;gt;temp&amp;gt;&amp;gt;p[temp].data&amp;gt;&amp;gt;p[temp].next;//temp作为下标
    while(first!=-1){   //链表排序且去除垃圾结点
        a.push_back(first);
        first=p[first].next;
    }
    for(i=0;i&amp;lt;a.size();i++){
        int x=fabs(p[a[i]].data);
        if(!mp[x]){     //如果mp不为空说明该结点元素的绝对值是第一次出现
            b.push_back(a[i]);
            mp[x]=1;    //标明x这个元素已有了
        }
        else    c.push_back(a[i]);  //c存取绝对值后重复的元素
    }
    for(i=0;i&amp;lt;b.size();i++){    //链b输出
        if(i!=b.size()-1)   printf(&amp;quot;%05d %d %05d\n&amp;quot;,b[i],p[b[i]].data,b[i+1]);
        else    printf(&amp;quot;%05d %d %d\n&amp;quot;,b[i],p[b[i]].data,-1);
    }
    for(i=0;i&amp;lt;c.size();i++){    //链c输出
        if(i!=c.size()-1)   printf(&amp;quot;%05d %d %05d\n&amp;quot;,c[i],p[c[i]].data,c[i+1]);
        else    printf(&amp;quot;%05d %d %d\n&amp;quot;,c[i],p[c[i]].data,-1);
    }
    return 0;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;l2-022-重排链表-25分&#34;&gt;L2-022 重排链表 (25分)&lt;/h3&gt;

&lt;p&gt;给定一个单链表 L​1 →L2 →⋯→Ln−1→Ln，请编写程序将链表重新排列为 Ln →L1→L​n−1→L2→⋯。例如：给定L为1→2→3→4→5→6，则输出应该为6→1→5→2→4→3。&lt;/p&gt;

&lt;p&gt;输入格式：&lt;br /&gt;
每个输入包含1个测试用例。每个测试用例第1行给出第1个结点的地址和结点总个数，即正整数N (≤10^5)。结点的地址是5位非负整数，NULL地址用−1表示。&lt;/p&gt;

&lt;p&gt;接下来有N行，每行格式为：&lt;/p&gt;

&lt;p&gt;Address Data Next&lt;/p&gt;

&lt;p&gt;其中Address是结点地址；Data是该结点保存的数据，为不超过10^5的正整数；Next是下一结点的地址。题目保证给出的链表上至少有两个结点。&lt;/p&gt;

&lt;p&gt;输出格式：&lt;br /&gt;
对每个测试用例，顺序输出重排后的结果链表，其上每个结点占一行，格式与输入相同。&lt;/p&gt;

&lt;p&gt;输入样例：&lt;br /&gt;
00100 6&lt;br /&gt;
00000 4 99999&lt;br /&gt;
00100 1 12309&lt;br /&gt;
68237 6 -1&lt;br /&gt;
33218 3 00000&lt;br /&gt;
99999 5 68237&lt;br /&gt;
12309 2 33218&lt;/p&gt;

&lt;p&gt;输出样例：&lt;br /&gt;
68237 6 00100&lt;br /&gt;
00100 1 99999&lt;br /&gt;
99999 5 12309&lt;br /&gt;
12309 2 00000&lt;br /&gt;
00000 4 33218&lt;br /&gt;
33218 3 -1&lt;/p&gt;

&lt;p&gt;这题排序很容易实现，先取尾部元素，再取头部元素就可以了。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#include&amp;lt;iostream&amp;gt;
#include&amp;lt;vector&amp;gt;
#include&amp;lt;cstdio&amp;gt;
using namespace std;
struct node{
    int next;
    int data;
}p[100005];
int main(){
    int N,i,j,temp,first;
    vector&amp;lt;int&amp;gt;a,ans;
    cin&amp;gt;&amp;gt;first&amp;gt;&amp;gt;N;
    for(i=0;i&amp;lt;N;i++){    
        cin&amp;gt;&amp;gt;temp;  //先输入temp
        cin&amp;gt;&amp;gt;p[temp].data&amp;gt;&amp;gt;p[temp].next;
    //  cin&amp;gt;&amp;gt;temp&amp;gt;&amp;gt;p[temp].data&amp;gt;&amp;gt;p[temp].next;  写成一行，有问题，可能是temp还没赋上值，所以后面两个输入失败 
    }
    while(first!=-1){   //排序+过滤 
        a.push_back(first);
        first=p[first].next;
    }
    for(i=0,j=a.size()-1;i!=a.size()/2;i++,j--){     
        ans.push_back(a[j]);    //先加尾部元素 
        ans.push_back(a[i]);    //后加头部元素 
    }
    if(a.size()%2) ans.push_back(a[i]); //上面循环只对偶数个有效，当a.size()%2!=0时，把中间的元素加上 
    for(i=0;i&amp;lt;ans.size();i++){  //输出 
        if(i!=ans.size()-1) printf(&amp;quot;%05d %d %05d\n&amp;quot;,ans[i],p[ans[i]].data,ans[i+1]);
        else    printf(&amp;quot;%05d %d %d\n&amp;quot;,ans[i],p[ans[i]].data,-1);
    }
    return 0;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;7-5-区块反转-25分&#34;&gt;7-5 区块反转 (25分)&lt;/h3&gt;

&lt;p&gt;给定一个单链表 L，我们将每 K 个结点看成一个区块（链表最后若不足 K 个结点，也看成一个区块），请编写程序将 L 中所有区块的链接反转。例如：给定 L 为 1→2→3→4→5→6→7→8，K 为 3，则输出应该为 7→8→4→5→6→1→2→3。&lt;/p&gt;

&lt;p&gt;输入格式：&lt;br /&gt;
每个输入包含 1 个测试用例。每个测试用例第 1 行给出第 1 个结点的地址、结点总个数正整数 N (≤10^5)、以及正整数 K (≤N)，即区块的大小。结点的地址是 5 位非负整数，NULL 地址用 −1 表示。&lt;/p&gt;

&lt;p&gt;接下来有 N 行，每行格式为：&lt;/p&gt;

&lt;p&gt;Address Data Next&lt;br /&gt;
其中 Address 是结点地址，Data 是该结点保存的整数数据，Next 是下一结点的地址。&lt;/p&gt;

&lt;p&gt;输出格式：&lt;br /&gt;
对每个测试用例，顺序输出反转后的链表，其上每个结点占一行，格式与输入相同。&lt;/p&gt;

&lt;p&gt;输入样例：&lt;br /&gt;
00100 8 3&lt;br /&gt;
71120 7 88666&lt;br /&gt;
00000 4 99999&lt;br /&gt;
00100 1 12309&lt;br /&gt;
68237 6 71120&lt;br /&gt;
33218 3 00000&lt;br /&gt;
99999 5 68237&lt;br /&gt;
88666 8 -1&lt;br /&gt;
12309 2 33218&lt;br /&gt;
输出样例：&lt;br /&gt;
71120 7 88666&lt;br /&gt;
88666 8 00000&lt;br /&gt;
00000 4 99999&lt;br /&gt;
99999 5 68237&lt;br /&gt;
68237 6 00100&lt;br /&gt;
00100 1 12309&lt;br /&gt;
12309 2 33218&lt;br /&gt;
33218 3 -1&lt;/p&gt;

&lt;p&gt;这题是PAT冬季的最后一道题，当时只拿了24分，卡在一个点上（委屈.png)
一样，按套路来救行了，前面的基本不变，只是题目要求的排序不同而已。
题目要求：以K为一个区块反转链表，最后不足K也要反转&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#include&amp;lt;iostream&amp;gt;
#include&amp;lt;string&amp;gt;
#include&amp;lt;cmath&amp;gt;
#include&amp;lt;vector&amp;gt;
#include&amp;lt;algorithm&amp;gt;
using namespace std;
struct node{
    int next;
    int data;
}p[100005];
int main(){
    int first,N,K,temp,i;
    vector&amp;lt;int&amp;gt;ad;
    cin&amp;gt;&amp;gt;first&amp;gt;&amp;gt;N&amp;gt;&amp;gt;K;
    for(i=0;i&amp;lt;N;i++){
        cin&amp;gt;&amp;gt;temp;
        cin&amp;gt;&amp;gt;p[temp].data&amp;gt;&amp;gt;p[temp].next;
    }
    temp=first;
    while(temp!=-1){
       ad.push_back(temp);
        temp=p[temp].next;
    }
    for(i=1;i&amp;lt;=ad.size()/K;i++){    //ad.size()/K表示K个区块，即反转的次数
        reverse(ad.begin()+K*(i-1),ad.begin()+K*i);//这需要找出反转的规律然后用公式来代替，从第一个元素开始到K个元素，如当i=1,K=3时，反转区间为（ad.begin(),ad.begin+3),即第一个元素到第三个元素反转，后面以此类推
    }
    if(ad.size()%K!=0){ //如果有余数，则后面还有不满足K个的区块，也要反转
        reverse(ad.end()-(ad.size()%K),ad.end());
    }
    for(i=ad.size()-1;i&amp;gt;=0;i--){    //最后逆序输出就跟样例一样了
        if(i)printf(&amp;quot;%05d %d %05d\n&amp;quot;,ad[i],p[ad[i]].data,ad[i-1]);
        else printf(&amp;quot;%05d %d -1\n&amp;quot;,ad[i],p[ad[i]].data);
    }//不过可能时因为我逆序输出，所以这题当K=1时，我的代码逆序输出，但答案好像是正序输出的，所以可能我丢的一分就在这。。。(后知后觉的蠢- -)
    return 0;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;.&lt;br /&gt;
.&lt;br /&gt;
.&lt;br /&gt;
2019年的最后一篇博客，哈~~&lt;br /&gt;
2019年12月31日 23:59:27&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>STL</title>
      <link>https://NTaurus.github.io/2019/12/stl/</link>
      <pubDate>Sun, 22 Dec 2019 11:59:15 +0800</pubDate>
      
      <guid>https://NTaurus.github.io/2019/12/stl/</guid>
      <description>&lt;h3 id=&#34;前言&#34;&gt;前言&lt;/h3&gt;

&lt;p&gt;C++STL(标准模板库)是一组功能强大的C++模板类，它为通用类和函数提供模板，这些模板实现了许多流行和常用的算法和数据结构，如向量（vector）、列表（list）、队列(queue)和堆栈(stack)等等。&lt;/p&gt;

&lt;h3 id=&#34;vector&#34;&gt;vector&lt;/h3&gt;

&lt;p&gt;vector可以理解成变长数组，它会根据需要自动增长;vector可以放任意的数据类型，可以方便、灵活地代替数组。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#include&amp;lt;vector&amp;gt;    //需要的头文件
vector&amp;lt;typename&amp;gt;v;    //定义一个向量，typename可以是（如vector&amp;lt;int&amp;gt;v;）int、string、char，也可以是node（结构体）等等..
vector&amp;lt;typename&amp;gt;v(50)   //定义初始大小为50的向量
vector&amp;lt;typename&amp;gt;v(50,0) //初始大小为50，元素全为0
//常用的操作
vector&amp;lt;int&amp;gt;v;   //先定义一个向量

v.push_back();    //把x加入v中（在尾部插入）
v.push_back(1);    //插入int型1
v.push_back(&#39;1&#39;)    //插入char型1

v.pop_back();   //删除最后一个元素

v.back();    //返回最后一个元素
v.size();   //返回v的大小
v.clear();  //清空数组

//访问方式
v[0];   //可以按数组的格式随机访问
cout&amp;lt;&amp;lt;v[0];    //输出也一样

vector&amp;lt;typename&amp;gt;::iterator it;   //用迭代器访问(先定义,typename要跟前面定义的向量对应)
for(it=v.begin();it!=v.end();it++){
    cout&amp;lt;&amp;lt;*it;  //输出元素
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;set&#34;&gt;set&lt;/h3&gt;

&lt;p&gt;set是一种包含已排序对象的关联容器。它的底层是一颗红黑树。set会自动排序，去重。&lt;br /&gt;
  特别注意的是：set不能修改元素的值，因为set元素是常量&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#include&amp;lt;set&amp;gt;   //需要的头文件
set&amp;lt;typename&amp;gt;s;   //typename是数据类型名，可以是int、double、string等等..

//常用的操作
s.size()    //返回集合的大小
s.empty()   //判断集合是否为空，若为空返回ture

s.begin()   //返回指向第一个元素的迭代器
s.end()     //返回指向最后一个元素的迭代器

s.rbegin()  //返回指向集合中最后一个元素的反向迭代器
s.rend()    //返回指向集合中第一个元素的反向迭代器

s.insert()    //在集合中插入元素
s.insert(1)    //插入元素1

s.erase()   //删除集合中的元素
s.erase(1)  //删除键值为1的元素

s.find()    //返回一个指向被查找到元素的迭代器
it=s.find(1)   //如果找到就it!=s.end(),否则it==s.end()

s.clear()   //清空集合
//访问或遍历
set不能直接访问，需要用到迭代器
set&amp;lt;typename&amp;gt;::iterator it;//定义迭代器

for(it=s.begin();it!=s.end();it++){ //遍历输出
    cout&amp;lt;&amp;lt;*it;  //输出元素
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;map&#34;&gt;map&lt;/h3&gt;

&lt;p&gt;map是一类关联式容器。map中有关键字（key）跟值（value）。&lt;br /&gt;
map会自动按key升序排序&lt;br /&gt;
unordered_map则不会&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#include&amp;lt;map&amp;gt;   //需要的头文件
map&amp;lt;typename1,typename2&amp;gt;mp; //定义key-&amp;gt;value关系的map（key跟value的类型可以是任意的）
map&amp;lt;string,int&amp;gt;mp;  //例如：关键字key为string，对应的值value为int型

//常用的操作

//插入
mp.insert(pair&amp;lt;string, int&amp;gt;(&amp;quot;john&amp;quot;,98)); //插入key为“john”，value为98的元素
mp[&amp;quot;john&amp;quot;]=98    //也可以直接这样

//输出
cout&amp;lt;&amp;lt;mp[&amp;quot;john&amp;quot;];
//迭代器访问
map&amp;lt;string,int&amp;gt;::iterator it; 
for(it=mp.begin();it!=mp.end();it++){
    cout&amp;lt;&amp;lt;*it-&amp;gt;first&amp;lt;&amp;lt;&#39; &#39;&amp;lt;&amp;lt;*it-&amp;gt;second&amp;lt;&amp;lt;endl&amp;gt;&amp;gt;;
}

it=mp.find(key)    //查找关键字，不存在则返回it=mp.end()
mp.erase(it)  //删除it指向的映射
mp.size()   //返回map的大小
mp.clear()  //清空map
&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    
    <item>
      <title>PAT乙级考试总结</title>
      <link>https://NTaurus.github.io/2019/12/pat%E4%B9%99%E7%BA%A7%E8%80%83%E8%AF%95%E6%80%BB%E7%BB%93/</link>
      <pubDate>Sat, 21 Dec 2019 19:36:59 +0800</pubDate>
      
      <guid>https://NTaurus.github.io/2019/12/pat%E4%B9%99%E7%BA%A7%E8%80%83%E8%AF%95%E6%80%BB%E7%BB%93/</guid>
      <description>&lt;h1 id=&#34;冬季乙级考试总结&#34;&gt;冬季乙级考试总结&lt;/h1&gt;

&lt;h3 id=&#34;前言&#34;&gt;前言&lt;/h3&gt;

&lt;p&gt;这次考试难度其实并不大，第三题又考了字符串的输出，题库有类似的，只不过换成了String，还有第五题的链表，秋季考了链表，以为不会考了，姥姥真是不按套路出牌，还好对链表还算熟悉。让人糟心的是第四题。考了HELLO WORLD，没错真的是HELLO WORLD，但又不是一般的helloworld，这题光是输入的数据就一百八十多行，用7*5的矩阵表示二十六个字母。只能说会HELLO WORLD就离满分不远了。&lt;br /&gt;
姥姥在知乎对本次考试的评价是：简单？&lt;br /&gt;
是简单，只是再也不敢说自己是HELLO WORLD水平了。。&lt;/p&gt;

&lt;h3 id=&#34;7-1-2019数列-15分&#34;&gt;7-1 2019数列 (15分)&lt;/h3&gt;

&lt;hr /&gt;

&lt;p&gt;把 2019 各个数位上的数字 2、0、1、9 作为一个数列的前 4 项，用它们去构造一个无穷数列，其中第 n（&amp;gt;4）项是它前 4 项之和的个位数字。例如第 5 项为 2， 因为 2+0+1+9=12，个位数是 2。&lt;/p&gt;

&lt;p&gt;本题就请你编写程序，列出这个序列的前 n 项。&lt;/p&gt;

&lt;p&gt;输入格式：&lt;br /&gt;
输入给出正整数 n（≤1000）。&lt;/p&gt;

&lt;p&gt;输出格式：&lt;br /&gt;
在一行中输出数列的前 n 项，数字间不要有空格。&lt;/p&gt;

&lt;p&gt;输入样例：&lt;br /&gt;
10&lt;br /&gt;
输出样例：&lt;br /&gt;
2019224758&lt;br /&gt;
题外话：这个数列中永远不会出现 2018，你能证明吗？&lt;/p&gt;

&lt;p&gt;这题比较容易，值得注意的是，初始项并非2019，而是从2开始，开始我以2019为初始项没AC，然后以2为初始项才AC，花了13分钟。。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#include&amp;lt;iostream&amp;gt;
#include&amp;lt;string&amp;gt;
#include&amp;lt;cmath&amp;gt;
#include&amp;lt;vector&amp;gt;
using namespace std;
int main(){
    int N;
    int i,j,x;
    string str=&amp;quot;&amp;quot;;
    cin&amp;gt;&amp;gt;N;
    for(j=0,i=0;str.size()&amp;lt;N;i++,j++){
        if(j&amp;lt;4){
            if(j==0)str.push_back(&#39;2&#39;);
            else if(j==1)str.push_back(&#39;0&#39;);
            else if(j==2)str.push_back(&#39;1&#39;);
            else if(j==3)str.push_back(&#39;9&#39;);
            continue;
        }
        x=((str[j-1]-&#39;0&#39;)+(str[j-2]-&#39;0&#39;)+(str[j-3]-&#39;0&#39;)+(str[j-4]-&#39;0&#39;))%10;
        str.push_back(x+&#39;0&#39;);
    }
    cout&amp;lt;&amp;lt;str;
    return 0;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;7-2-老鼠爱大米-20分&#34;&gt;7-2 老鼠爱大米 (20分)&lt;/h3&gt;

&lt;p&gt;翁恺老师曾经设计过一款 Java 挑战游戏，叫“老鼠爱大米”（或许因为他的外号叫“胖胖鼠”）。每个玩家用 Java 代码控制一只鼠，目标是抢吃尽可能多的大米让自己变成胖胖鼠，最胖的那只就是冠军。&lt;/p&gt;

&lt;p&gt;因为游戏时间不能太长，我们把玩家分成 N 组，每组 M 只老鼠同场竞技，然后从 N 个分组冠军中直接选出最胖的冠军胖胖鼠。现在就请你写个程序来得到冠军的体重。&lt;/p&gt;

&lt;p&gt;输入格式：&lt;br /&gt;
输入在第一行中给出 2 个正整数：N（≤100）为组数，M（≤10）为每组玩家个数。随后 N 行，每行给出一组玩家控制的 M 只老鼠最后的体重，均为不超过 10^4的非负整数。数字间以空格分隔。&lt;/p&gt;

&lt;p&gt;输出格式：&lt;br /&gt;
首先在第一行顺次输出各组冠军的体重，数字间以 1 个空格分隔，行首尾不得有多余空格。随后在第二行输出冠军胖胖鼠的体重。&lt;/p&gt;

&lt;p&gt;输入样例：&lt;br /&gt;
3 5&lt;br /&gt;
62 53 88 72 81&lt;br /&gt;
12 31 9 0 2&lt;br /&gt;
91 42 39 6 48&lt;br /&gt;
输出样例：&lt;br /&gt;
88 31 91&lt;br /&gt;
91&lt;/p&gt;

&lt;p&gt;这题没啥好说的，sort用的快乐哈，懒得再找最值。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#include&amp;lt;iostream&amp;gt;
#include&amp;lt;string&amp;gt;
#include&amp;lt;cmath&amp;gt;
include&amp;lt;vector&amp;gt;
#include&amp;lt;algorithm&amp;gt;
using namespace std;
int main(){
    int N,M,max[104],l=0;
    cin&amp;gt;&amp;gt;N&amp;gt;&amp;gt;M;  
    for(int i=0;i&amp;lt;N;i++){
        int a[15];
        for(int j=0;j&amp;lt;M;j++){   
            cin&amp;gt;&amp;gt;a[j];      
        }
        sort(a,a+M);
        max[l]=a[M-1];
        l++;
    }   
    for(int i=0;i&amp;lt;l;i++){
        if(i)cout&amp;lt;&amp;lt;&#39; &#39;;
        cout&amp;lt;&amp;lt;max[i];
    }
    sort(max,max+l);
    cout&amp;lt;&amp;lt;endl&amp;lt;&amp;lt;max[l-1];
    return 0;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;7-3-string复读机-20分&#34;&gt;7-3 String复读机 (20分)&lt;/h3&gt;

&lt;p&gt;给定一个长度不超过 10^4的、仅由英文字母构成的字符串。请将字符重新调整顺序，按 StringString&amp;hellip;. （注意区分大小写）这样的顺序输出，并忽略其它字符。当然，六种字符的个数不一定是一样多的，若某种字符已经输出完，则余下的字符仍按 String 的顺序打印，直到所有字符都被输出。例如 gnirtSSs 要调整成 StringS 输出，其中 s 是多余字符被忽略。&lt;/p&gt;

&lt;p&gt;输入格式：&lt;br /&gt;
输入在一行中给出一个长度不超过 10^4的、仅由英文字母构成的非空字符串。&lt;/p&gt;

&lt;p&gt;输出格式：&lt;br /&gt;
在一行中按题目要求输出排序后的字符串。题目保证输出非空。&lt;/p&gt;

&lt;p&gt;输入样例：&lt;br /&gt;
sTRidlinSayBingStrropriiSHSiRiagIgtSSr&lt;br /&gt;
输出样例：&lt;br /&gt;
StringStringSrigSriSiSii&lt;/p&gt;

&lt;p&gt;这题跟题库里的那道做法一样，统计数量按顺序输出就好了&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#include&amp;lt;iostream&amp;gt;
#include&amp;lt;string&amp;gt;
#include&amp;lt;cmath&amp;gt;
#include&amp;lt;vector&amp;gt;
#include&amp;lt;algorithm&amp;gt;
using namespace std;
int main(){
    string str;
    int s,t,r,i,n,g;
    int j,k;
    s=t=r=i=n=g=0;
    getline(cin,str);

    for(j=0;j&amp;lt;str.size();j++){
        if(str[j]==&#39;S&#39;)s++;
        else if(str[j]==&#39;t&#39;)t++;
        else if(str[j]==&#39;r&#39;)r++;
        else if(str[j]==&#39;i&#39;)i++;
        else if(str[j]==&#39;n&#39;)n++;
        else if(str[j]==&#39;g&#39;)g++;
    }
    while(s||t||r||i||n||g){

        if(s){
            cout&amp;lt;&amp;lt;&#39;S&#39;;
            s--;
        }
        if(t){
            cout&amp;lt;&amp;lt;&#39;t&#39;;
            t--;
        }
        if(r){
            cout&amp;lt;&amp;lt;&#39;r&#39;;
            r--;
        }
        if(i){
            cout&amp;lt;&amp;lt;&#39;i&#39;;
            i--;
        }
        if(n){
            cout&amp;lt;&amp;lt;&#39;n&#39;;
            n--;
        }
        if(g){
            cout&amp;lt;&amp;lt;&#39;g&#39;;
            g--;
        }
    }   
    return 0;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;7-4-擅长c-20分&#34;&gt;7-4 擅长C (20分)&lt;/h3&gt;

&lt;p&gt;输入格式：&lt;br /&gt;
输入首先给出 26 个英文大写字母 A-Z，每个字母用一个 7×5 的、由 C 和 . 组成的矩阵构成。最后在一行中给出一个句子，以回车结束。句子是由若干个单词（每个包含不超过 10 个连续的大写英文字母）组成的，单词间以任何非大写英文字母分隔。&lt;/p&gt;

&lt;p&gt;题目保证至少给出一个单词。&lt;/p&gt;

&lt;p&gt;输出格式：&lt;br /&gt;
对每个单词，将其每个字母用矩阵形式在一行中输出，字母间有一列空格分隔。单词的首尾不得有多余空格。&lt;/p&gt;

&lt;p&gt;相邻的两个单词间必须有一空行分隔。输出的首尾不得有多余空行。&lt;/p&gt;

&lt;p&gt;输入样例：&lt;br /&gt;
..C..&lt;br /&gt;
.C.C.&lt;br /&gt;
C&amp;hellip;C&lt;br /&gt;
CCCCC&lt;br /&gt;
C&amp;hellip;C&lt;br /&gt;
C&amp;hellip;C&lt;br /&gt;
C&amp;hellip;C&lt;br /&gt;
CCCC.&lt;br /&gt;
C&amp;hellip;C&lt;br /&gt;
C&amp;hellip;C&lt;br /&gt;
CCCC.&lt;br /&gt;
C&amp;hellip;C&lt;br /&gt;
C&amp;hellip;C&lt;br /&gt;
CCCC.&lt;br /&gt;
.CCC.&lt;br /&gt;
C&amp;hellip;C&lt;br /&gt;
C&amp;hellip;.&lt;br /&gt;
C&amp;hellip;.&lt;br /&gt;
C&amp;hellip;.&lt;br /&gt;
C&amp;hellip;C&lt;br /&gt;
.CCC.&lt;br /&gt;
CCCC.&lt;br /&gt;
C&amp;hellip;C&lt;br /&gt;
C&amp;hellip;C&lt;br /&gt;
C&amp;hellip;C&lt;br /&gt;
C&amp;hellip;C&lt;br /&gt;
C&amp;hellip;C&lt;br /&gt;
CCCC.&lt;br /&gt;
CCCCC&lt;br /&gt;
C&amp;hellip;.&lt;br /&gt;
C&amp;hellip;.&lt;br /&gt;
CCCC.&lt;br /&gt;
C&amp;hellip;.&lt;br /&gt;
C&amp;hellip;.&lt;br /&gt;
CCCCC&lt;br /&gt;
CCCCC&lt;br /&gt;
C&amp;hellip;.&lt;br /&gt;
C&amp;hellip;.&lt;br /&gt;
CCCC.&lt;br /&gt;
C&amp;hellip;.&lt;br /&gt;
C&amp;hellip;.&lt;br /&gt;
C&amp;hellip;.&lt;br /&gt;
CCCC.&lt;br /&gt;
C&amp;hellip;C&lt;br /&gt;
C&amp;hellip;.&lt;br /&gt;
C.CCC&lt;br /&gt;
C&amp;hellip;C&lt;br /&gt;
C&amp;hellip;C&lt;br /&gt;
CCCC.&lt;br /&gt;
C&amp;hellip;C&lt;br /&gt;
C&amp;hellip;C&lt;br /&gt;
C&amp;hellip;C&lt;br /&gt;
CCCCC&lt;br /&gt;
C&amp;hellip;C&lt;br /&gt;
C&amp;hellip;C&lt;br /&gt;
C&amp;hellip;C&lt;br /&gt;
CCCCC&lt;br /&gt;
..C..&lt;br /&gt;
..C..&lt;br /&gt;
..C..&lt;br /&gt;
..C..&lt;br /&gt;
..C..&lt;br /&gt;
CCCCC&lt;br /&gt;
CCCCC&lt;br /&gt;
&amp;hellip;.C&lt;br /&gt;
&amp;hellip;.C&lt;br /&gt;
&amp;hellip;.C&lt;br /&gt;
&amp;hellip;.C&lt;br /&gt;
C&amp;hellip;C&lt;br /&gt;
.CCC.&lt;br /&gt;
C&amp;hellip;C&lt;br /&gt;
C..C.&lt;br /&gt;
C.C..&lt;br /&gt;
CC&amp;hellip;&lt;br /&gt;
C.C..&lt;br /&gt;
C..C.&lt;br /&gt;
C&amp;hellip;C&lt;br /&gt;
C&amp;hellip;.&lt;br /&gt;
C&amp;hellip;.&lt;br /&gt;
C&amp;hellip;.&lt;br /&gt;
C&amp;hellip;.&lt;br /&gt;
C&amp;hellip;.&lt;br /&gt;
C&amp;hellip;.&lt;br /&gt;
CCCCC&lt;br /&gt;
C&amp;hellip;C&lt;br /&gt;
C&amp;hellip;C&lt;br /&gt;
CC.CC&lt;br /&gt;
C.C.C&lt;br /&gt;
C&amp;hellip;C&lt;br /&gt;
C&amp;hellip;C&lt;br /&gt;
C&amp;hellip;C&lt;br /&gt;
C&amp;hellip;C&lt;br /&gt;
C&amp;hellip;C&lt;br /&gt;
CC..C&lt;br /&gt;
C.C.C&lt;br /&gt;
C..CC&lt;br /&gt;
C&amp;hellip;C&lt;br /&gt;
C&amp;hellip;C&lt;br /&gt;
.CCC.&lt;br /&gt;
C&amp;hellip;C&lt;br /&gt;
C&amp;hellip;C&lt;br /&gt;
C&amp;hellip;C&lt;br /&gt;
C&amp;hellip;C&lt;br /&gt;
C&amp;hellip;C&lt;br /&gt;
.CCC.&lt;br /&gt;
CCCC.&lt;br /&gt;
C&amp;hellip;C&lt;br /&gt;
C&amp;hellip;C&lt;br /&gt;
CCCC.&lt;br /&gt;
C&amp;hellip;.&lt;br /&gt;
C&amp;hellip;.&lt;br /&gt;
C&amp;hellip;.&lt;br /&gt;
.CCC.&lt;br /&gt;
C&amp;hellip;C&lt;br /&gt;
C&amp;hellip;C&lt;br /&gt;
C&amp;hellip;C&lt;br /&gt;
C.C.C&lt;br /&gt;
C..CC&lt;br /&gt;
.CCC.&lt;br /&gt;
CCCC.&lt;br /&gt;
C&amp;hellip;C&lt;br /&gt;
CCCC.&lt;br /&gt;
CC&amp;hellip;&lt;br /&gt;
C.C..&lt;br /&gt;
C..C.&lt;br /&gt;
C&amp;hellip;C&lt;br /&gt;
.CCC.&lt;br /&gt;
C&amp;hellip;C&lt;br /&gt;
C&amp;hellip;.&lt;br /&gt;
.CCC.&lt;br /&gt;
&amp;hellip;.C&lt;br /&gt;
C&amp;hellip;C&lt;br /&gt;
.CCC.&lt;br /&gt;
CCCCC&lt;br /&gt;
..C..&lt;br /&gt;
..C..&lt;br /&gt;
..C..&lt;br /&gt;
..C..&lt;br /&gt;
..C..&lt;br /&gt;
..C..&lt;br /&gt;
C&amp;hellip;C&lt;br /&gt;
C&amp;hellip;C&lt;br /&gt;
C&amp;hellip;C&lt;br /&gt;
C&amp;hellip;C&lt;br /&gt;
C&amp;hellip;C&lt;br /&gt;
C&amp;hellip;C&lt;br /&gt;
.CCC.&lt;br /&gt;
C&amp;hellip;C&lt;br /&gt;
C&amp;hellip;C&lt;br /&gt;
C&amp;hellip;C&lt;br /&gt;
C&amp;hellip;C&lt;br /&gt;
C&amp;hellip;C&lt;br /&gt;
.C.C.&lt;br /&gt;
..C..&lt;br /&gt;
C&amp;hellip;C&lt;br /&gt;
C&amp;hellip;C&lt;br /&gt;
C&amp;hellip;C&lt;br /&gt;
C.C.C&lt;br /&gt;
CC.CC&lt;br /&gt;
C&amp;hellip;C&lt;br /&gt;
C&amp;hellip;C&lt;br /&gt;
C&amp;hellip;C&lt;br /&gt;
C&amp;hellip;C&lt;br /&gt;
.C.C.&lt;br /&gt;
..C..&lt;br /&gt;
.C.C.&lt;br /&gt;
C&amp;hellip;C&lt;br /&gt;
C&amp;hellip;C&lt;br /&gt;
C&amp;hellip;C&lt;br /&gt;
C&amp;hellip;C&lt;br /&gt;
.C.C.&lt;br /&gt;
..C..&lt;br /&gt;
..C..&lt;br /&gt;
..C..&lt;br /&gt;
..C..&lt;br /&gt;
CCCCC&lt;br /&gt;
&amp;hellip;.C&lt;br /&gt;
&amp;hellip;C.&lt;br /&gt;
..C..&lt;br /&gt;
.C&amp;hellip;&lt;br /&gt;
C&amp;hellip;.&lt;br /&gt;
CCCCC&lt;br /&gt;
HELLO~WORLD!&lt;br /&gt;
输出样例：&lt;br /&gt;
&lt;img src=&#34;https://NTaurus.github.io/images/helloworld.jpg&#34; alt=&#34;&amp;quot;&amp;quot;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;这题我只想说：我不擅长C（哭.png）&lt;br /&gt;
前面三道二十四分钟就做完了，当时看了一下排名还是算是第十几的并列第一，原本信心满满的我栽在了HELLO WORLD上。。这题先留个坑，等复习甲级或者有时间再重新写一遍。卡在79分。。于是就只为过个点至少上80，然后就不写通用的，最后过了题目的样例拿了12分，再处理一个点13分。。而且让人郁闷的是定义的三维数组w[26][7][5],当时用cout&amp;lt;&amp;lt; w[i][j],输出一行居然出来一堆东西，调试看数据是对的，调试半天，最后试了试%c 一个一个字符打印才正确输出。。&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;7-5-区块反转-25分&#34;&gt;7-5 区块反转 (25分)&lt;/h3&gt;

&lt;p&gt;给定一个单链表 L，我们将每 K 个结点看成一个区块（链表最后若不足 K 个结点，也看成一个区块），请编写程序将 L 中所有区块的链接反转。例如：给定 L 为 1→2→3→4→5→6→7→8，K 为 3，则输出应该为 7→8→4→5→6→1→2→3。&lt;/p&gt;

&lt;p&gt;输入格式：&lt;br /&gt;
每个输入包含 1 个测试用例。每个测试用例第 1 行给出第 1 个结点的地址、结点总个数正整数 N (≤10^5)、以及正整数 K (≤N)，即区块的大小。结点的地址是 5 位非负整数，NULL 地址用 −1 表示。&lt;/p&gt;

&lt;p&gt;接下来有 N 行，每行格式为：&lt;/p&gt;

&lt;p&gt;Address Data Next&lt;br /&gt;
其中 Address 是结点地址，Data 是该结点保存的整数数据，Next 是下一结点的地址。&lt;/p&gt;

&lt;p&gt;输出格式：&lt;br /&gt;
对每个测试用例，顺序输出反转后的链表，其上每个结点占一行，格式与输入相同。&lt;/p&gt;

&lt;p&gt;输入样例：&lt;br /&gt;
00100 8 3&lt;br /&gt;
71120 7 88666&lt;br /&gt;
00000 4 99999&lt;br /&gt;
00100 1 12309&lt;br /&gt;
68237 6 71120&lt;br /&gt;
33218 3 00000&lt;br /&gt;
99999 5 68237&lt;br /&gt;
88666 8 -1&lt;br /&gt;
12309 2 33218&lt;br /&gt;
输出样例：&lt;br /&gt;
71120 7 88666&lt;br /&gt;
88666 8 00000&lt;br /&gt;
00000 4 99999&lt;br /&gt;
99999 5 68237&lt;br /&gt;
68237 6 00100&lt;br /&gt;
00100 1 12309&lt;br /&gt;
12309 2 33218&lt;br /&gt;
33218 3 -1&lt;/p&gt;

&lt;p&gt;当时直接跳过HELLO WORLD了，看到链表终于找回一点信心。按套路来就行。不过这题有个坑点，好多人都卡在24分，我也是，当时考虑了会不会K=0，但考后看了题目K为正整数，怪不得当时加了K=0的判断还没AC，知乎有人说那一分可能是有个垃圾点不在链表上，这个我做了处理了，也没有AC，所以肯定不是这个的原因。不知道是不是K=1的情况，K=1的话，我的程序是逆序输出的，但K=1的话，反转自己，那岂不是没反转，所以是不是要正序输出。。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#include&amp;lt;iostream&amp;gt;
#include&amp;lt;string&amp;gt;
#include&amp;lt;cmath&amp;gt;
#include&amp;lt;vector&amp;gt;
#include&amp;lt;algorithm&amp;gt;
using namespace std;
struct node{
    int next;
    int data;
}p[100005];
int main(){
    int first,N,K,temp,i;
   vector&amp;lt;int&amp;gt;ad;
    cin&amp;gt;&amp;gt;first&amp;gt;&amp;gt;N&amp;gt;&amp;gt;K;
    for(i=0;i&amp;lt;N;i++){
        cin&amp;gt;&amp;gt;temp;
        cin&amp;gt;&amp;gt;p[temp].data&amp;gt;&amp;gt;p[temp].next;
    }
   temp=first;
    while(temp!=-1){
       ad.push_back(temp);
        temp=p[temp].next;
    }
    for(i=1;i&amp;lt;=ad.size()/K;i++){
        reverse(ad.begin()+K*(i-1),ad.begin()+K*i);
    }
   if(ad.size()%K!=0){
        reverse(ad.end()-(ad.size()%K),ad.end());
    }
    for(i=ad.size()-1;i&amp;gt;=0;i--){
        if(i)printf(&amp;quot;%05d %d %05d\n&amp;quot;,ad[i],p[ad[i]].data,ad[i-1]);
        else printf(&amp;quot;%05d %d -1\n&amp;quot;,ad[i],p[ad[i]].data);
    }   
    return 0;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;p&gt;这是第一次参加，只拿了92分，没有满分还是有点遗憾的，下次的甲级加油吧！&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>博客搭建好啦！</title>
      <link>https://NTaurus.github.io/2019/12/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E5%A5%BD%E5%95%A6/</link>
      <pubDate>Fri, 20 Dec 2019 22:08:09 +0800</pubDate>
      
      <guid>https://NTaurus.github.io/2019/12/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E5%A5%BD%E5%95%A6/</guid>
      <description>&lt;h1 id=&#34;总结&#34;&gt;总结&lt;/h1&gt;

&lt;h2 id=&#34;感受&#34;&gt;感受&lt;/h2&gt;

&lt;p&gt;搭建的过程还是遇到挺多麻烦的，&lt;br /&gt;
毕竟很多东西都没有接触过。&lt;br /&gt;
从上周六开始着手准备搭建到搭建完成，&lt;br /&gt;
前前后后差不多一个星期，&lt;br /&gt;
因为还没结课，&lt;br /&gt;
白天的时间比较零散，&lt;br /&gt;
断断续续地研究搭建博客。&lt;br /&gt;
开始博客部署在github上，&lt;br /&gt;
访问实在是慢，&lt;br /&gt;
研究coding研究了好久，&lt;br /&gt;
coding这平台真是可（e）爱（xin），&lt;br /&gt;
上传文件夹显示 0 Byte。&lt;br /&gt;
无奈手动上传不了，&lt;br /&gt;
只能再学一下git的使用，&lt;br /&gt;
虽然跟着命令敲，&lt;br /&gt;
但不理解它什么意思，&lt;br /&gt;
真难受，&lt;br /&gt;
一个个ERROF瞬间懵，&lt;br /&gt;
心中无限疑惑，&lt;br /&gt;
催我上bing。&lt;br /&gt;
买一个域名还是挺有必要的，&lt;br /&gt;
github博客同步到coding，&lt;br /&gt;
用自己的域名双线解析，&lt;br /&gt;
可以加快访问博客的速度。&lt;br /&gt;
听说国内的域名要备案，&lt;br /&gt;
今天在DNSPod上解析域名，&lt;br /&gt;
确实要求要备案，&lt;br /&gt;
备案麻烦，&lt;br /&gt;
审核完得好多天。&lt;br /&gt;
今天加了播放音乐的小插件，&lt;br /&gt;
觉得博客有了灵魂，哈&lt;br /&gt;
博客总体就这样了，&lt;br /&gt;
等想起来或者偷学到什么技术的时候再弄。&lt;/p&gt;

&lt;h2 id=&#34;需要注意的&#34;&gt;需要注意的&lt;/h2&gt;

&lt;p&gt;hugo主题直接clone的话，&lt;br /&gt;
速度是十分慢的，&lt;br /&gt;
可以改电脑上的hosts文件。&lt;br /&gt;
文件路径：
&lt;code&gt;C:\Windows\System32\drivers\etc\hosts&lt;/code&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;code&gt;git commit -m &amp;quot;XX&amp;quot;&lt;/code&gt;&lt;br /&gt;
双引号里面可以随便的写，但不能缺，&lt;br /&gt;
开始以为注释，原来也是属于命令的一部分。&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;SSL安全证书得每三个月重新申请，&lt;br /&gt;
重新申请的时候，&lt;br /&gt;
先停用github的海外解析再申请。&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;如果在git的CMD里验证coding或者github身份的时候，&lt;br /&gt;
不小心输入错误的密码或账号，&lt;br /&gt;
可以到电脑&lt;strong&gt;control&lt;/strong&gt;-&amp;gt;&lt;strong&gt;用户账户&lt;/strong&gt;-&amp;gt;&lt;strong&gt;windows凭证&lt;/strong&gt;,
底下有个&lt;strong&gt;普通凭证&lt;/strong&gt;,&lt;br /&gt;
把账号删掉再重新关联仓库就可以了（或者直接修改账号信息）。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>第二天</title>
      <link>https://NTaurus.github.io/2019/12/%E7%AC%AC%E4%BA%8C%E5%A4%A9/</link>
      <pubDate>Tue, 17 Dec 2019 13:27:17 +0800</pubDate>
      
      <guid>https://NTaurus.github.io/2019/12/%E7%AC%AC%E4%BA%8C%E5%A4%A9/</guid>
      <description>&lt;h2 id=&#34;总结&#34;&gt;总结&lt;/h2&gt;

&lt;p&gt;昨晚搞到了十二点多。。&lt;br /&gt;
 记录一下现在的情况：&lt;br /&gt;
 因为服务器在国外，&lt;br /&gt;
 他人访问博客有点慢（好吧，超级慢），&lt;br /&gt;
 图片加载很慢，&lt;br /&gt;
 分辨率改小点虽然会快点，&lt;br /&gt;
 但这不是解决问题的根本办法，&lt;br /&gt;
 又向呆神咨询了下，&lt;br /&gt;
 在国内的服务器上做个备份，&lt;br /&gt;
 加快访问速度，&lt;br /&gt;
 准备买个域名，&lt;br /&gt;
 然后再研究一下coding的使用，&lt;br /&gt;
 啥都不懂，&lt;br /&gt;
 硬着头皮啃。&lt;br /&gt;
 13:34:17&lt;/p&gt;

&lt;p&gt;咳咳&lt;br /&gt;
 我回来了&lt;br /&gt;
 经过&lt;br /&gt;
 反复的心理斗争，&lt;br /&gt;
 最终还是决定花笔巨款（俺一个月的早餐）买了个域名&lt;br /&gt;
 还交了两块钱的税（真是个遵纪守法的好青年）&lt;br /&gt;
 域名跟仓库绑定好了&lt;br /&gt;
 博客的访问速度快了一丢丢&lt;br /&gt;
 ping一下数据包丢失50%？？&lt;br /&gt;
 革命尚未成功&lt;br /&gt;
 同志仍须努力&lt;br /&gt;
 18:35:43&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>我的博客开通啦</title>
      <link>https://NTaurus.github.io/2019/12/%E6%88%91%E7%9A%84%E5%8D%9A%E5%AE%A2%E5%BC%80%E9%80%9A%E5%95%A6/</link>
      <pubDate>Mon, 16 Dec 2019 23:32:00 +0800</pubDate>
      
      <guid>https://NTaurus.github.io/2019/12/%E6%88%91%E7%9A%84%E5%8D%9A%E5%AE%A2%E5%BC%80%E9%80%9A%E5%95%A6/</guid>
      <description>&lt;h1 id=&#34;做个小小的记录&#34;&gt;做个小小的记录&lt;/h1&gt;

&lt;p&gt;&lt;img src=&#34;https://NTaurus.github.io/images/pig.jpg&#34; alt=&#34;&amp;quot;猪猪&amp;quot;&#34; /&gt;
好久之前就想开一个博客，&lt;br /&gt;
也曾在一些博客网站上注册过，&lt;br /&gt;
各式各样的广告让我眼花缭乱，&lt;br /&gt;
还有一堆限制（一脸嫌弃）。&lt;br /&gt;
后来看到有搭建个人博客的教程，&lt;br /&gt;
便有了自己动手搭建一个属于自己的博客的想法，&lt;br /&gt;
但要准备PAT乙级考试跟&lt;del&gt;四级&lt;/del&gt;（不，你没有准备四级。。下次再来的哭脸.png）&lt;br /&gt;
所以就拖到了现在。&lt;/p&gt;

&lt;p&gt;开始挺棘手的，&lt;br /&gt;
完全没有经验，&lt;br /&gt;
在不理解啥含义的情况下，&lt;br /&gt;
在CMD里跟着教程瞎敲命令（真是蠢得可以），&lt;br /&gt;
期间还卡了好多次，&lt;br /&gt;
还得感谢&lt;strong&gt;SAquarius&lt;/strong&gt;呆神的不吝赐教，&lt;br /&gt;
在&lt;strong&gt;SAquarius&lt;/strong&gt;的博客学了不少东西，再次感谢！&lt;/p&gt;

&lt;p&gt;开博客是想在往后的刷题跟学习中做一些笔记。&lt;br /&gt;
要准备明年三月的：甲级考试、天梯赛跟蓝桥杯（甲级还是有点方，硬着头皮肝它）&lt;br /&gt;
所以近期可能是复习数据结构的知识还有刷题巩固。&lt;/p&gt;

&lt;p&gt;除此之外，&lt;br /&gt;
也可能会记录自己的最近的生活状态，&lt;br /&gt;
就当这里是树洞吧。&lt;/p&gt;

&lt;p&gt;都怪你老让我吃菜&lt;br /&gt;
不改host网速慢得让我目瞪口呆&lt;br /&gt;
多少次clone的失败是git不肯给我的爱&lt;br /&gt;
多少次pull的失败是gayhub在笑我活该&lt;br /&gt;
重来重来&lt;br /&gt;
冷冷的代码在我脑里胡乱的嗨&lt;br /&gt;
送它离开千里之外&lt;br /&gt;
我的blog终于怀上了胎&lt;br /&gt;
为养这个仔&lt;br /&gt;
硬着头皮跨过markdown的这障碍&lt;br /&gt;
搬砖搬到了现在&lt;br /&gt;
&lt;strong&gt;唉&lt;/strong&gt;&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>